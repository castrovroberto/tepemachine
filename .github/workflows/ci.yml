name: 🔄 VeriBoard CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '21'
  JAVA_DISTRIBUTION: 'corretto'

jobs:
  test:
    name: 🧪 Test & Quality Gates
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      rabbitmq:
        image: rabbitmq:3.12-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 30s
          --health-retries 3

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        cache: maven

    - name: 🔧 Verify Maven version
      run: mvn --version

    - name: 📋 Run code style checks
      run: mvn validate

    - name: 🏗️ Compile project
      run: mvn clean compile -B

    - name: 🧪 Run unit tests
      run: mvn test -B
      env:
        POSTGRES_URL: jdbc:postgresql://localhost:5432/test_db
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_pass

    - name: 🧪 Run integration tests
      run: mvn verify -B -P integration-tests
      env:
        POSTGRES_URL: jdbc:postgresql://localhost:5432/test_db
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_pass

    - name: 📊 Generate test coverage report
      run: mvn jacoco:report

    - name: 📈 Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./target/site/jacoco/jacoco.xml,./customer/target/site/jacoco/jacoco.xml,./fraud/target/site/jacoco/jacoco.xml,./notification/target/site/jacoco/jacoco.xml
        fail_ci_if_error: false

    - name: 🔍 Run dependency vulnerability scan
      run: mvn org.owasp:dependency-check-maven:check -B

    - name: 📦 Package application
      run: mvn package -B -DskipTests

    - name: 💾 Cache test results
      uses: actions/cache@v3
      with:
        path: |
          ~/.m2/repository
          **/target/surefire-reports
          **/target/failsafe-reports
        key: ${{ runner.os }}-test-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-test-

  quality-gates:
    name: 🛡️ Quality Gates
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        cache: maven

    - name: 📊 Enforce coverage threshold (70%)
      run: |
        mvn jacoco:check -B
        echo "✅ Coverage threshold met!"

    - name: 🔍 Static code analysis with SpotBugs
      run: mvn spotbugs:check -B

    - name: ✅ All quality gates passed
      run: echo "🎉 All quality gates passed successfully!" 